name: Haskell CI

on: [pull_request]

jobs:
  cabal:

    strategy:
      matrix:
        ghc: ['8.10.1', '8.8.3', '8.6.5', '8.4.4', '8.2.2', '8.0.2']
        cabal: ['3.0']
        os: [ubuntu-latest]

    runs-on: ${{ matrix.os }}


    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-haskell@v1
      with:
        ghc-version: ${{ matrix.ghc }}
        cabal-version: ${{ matrix.cabal }}

    - name: Cache
      uses: actions/cache@v1
      env:
        cache-name: cache-cabal
      with:
        path: ~/.cabal
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/*.cabal') }}-${{ hashFiles('**/cabal.project') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-

    - name: Install dependencies
      run: |
        cabal update
        cabal build --only-dependencies --enable-tests --enable-benchmarks

    - name: Build
      run: cabal build --enable-tests --enable-benchmarks all

  stack:

    strategy:
      matrix:
        os: [ubuntu-latest]
        stack-args: ['']

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-haskell@v1
      with:
        stack-version: 'latest'

    - name: Cache stack global package db
      id:   stack-global
      uses: actions/cache@v1
      with:
        path: ~/.stack
        key: ${{ runner.os }}-stack-global-${{ matrix.stack-args }}-${{ hashFiles('**.yaml') }}
        restore-keys: |
          ${{ runner.os }}-stack-global-${{ matrix.stack-args }}
          ${{ runner.os }}-stack-global

    # stack's local package dbs for the project and each package
    - name: Cache .stack-work
      id: stack-work
      uses: actions/cache@v1
      with:
        path: .stack-work
        key: ${{ runner.os }}-stack-work-${{ matrix.stack-args }}-${{ hashFiles('**.yaml') }}
        restore-keys: |
          ${{ runner.os }}-stack-work-${{ matrix.stack-args }}
          ${{ runner.os }}-stack-work

    - name: Install dependencies
      run: |
        stack build --test --bench --only-dependencies $ARGS
      env:
        ARGS: ${{ matrix.args }}

    - name: Build
      run: |
        stack build $ARGS
      env:
        ARGS: ${{ matrix.args }}
